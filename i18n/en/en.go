package en

import (
	"github.com/Oudwins/zog/internals"
	"github.com/Oudwins/zog/zconst"
)

var Map zconst.LangMap = map[zconst.ZogType]map[zconst.ZogErrCode]string{
	zconst.TypeString: {
		zconst.ErrCodeRequired:                              "is required",
		internals.NotErrCode(zconst.ErrCodeRequired):        "is not required",
		zconst.ErrCodeNotNil:                                "must not be empty",
		internals.NotErrCode(zconst.ErrCodeNotNil):          "must be empty",
		zconst.ErrCodeMin:                                   "string must contain at least {{min}} character(s)",
		internals.NotErrCode(zconst.ErrCodeMin):             "string not must contain at least {{min}} character(s)",
		zconst.ErrCodeMax:                                   "string must contain at most {{max}} character(s)",
		internals.NotErrCode(zconst.ErrCodeMax):             "string must not contain at most {{max}} character(s)",
		zconst.ErrCodeLen:                                   "string must be exactly {{len}} character(s)",
		internals.NotErrCode(zconst.ErrCodeLen):             "string must not be exactly {{len}} character(s)",
		zconst.ErrCodeEmail:                                 "must be a valid email",
		internals.NotErrCode(zconst.ErrCodeEmail):           "must not be a valid email",
		zconst.ErrCodeUUID:                                  "must be a valid UUID",
		internals.NotErrCode(zconst.ErrCodeUUID):            "must not be a valid UUID",
		zconst.ErrCodeMatch:                                 "string is invalid",
		internals.NotErrCode(zconst.ErrCodeMatch):           "string is valid",
		zconst.ErrCodeURL:                                   "must be a valid URL",
		internals.NotErrCode(zconst.ErrCodeURL):             "must not be a valid URL",
		zconst.ErrCodeHasPrefix:                             "string must start with {{prefix}}",
		internals.NotErrCode(zconst.ErrCodeHasPrefix):       "string must not start with {{prefix}}",
		zconst.ErrCodeHasSuffix:                             "string must end with {{suffix}}",
		internals.NotErrCode(zconst.ErrCodeHasSuffix):       "string must not end with {{suffix}}",
		zconst.ErrCodeContains:                              "string must contain {{contained}}",
		internals.NotErrCode(zconst.ErrCodeContains):        "string must not contain {{contained}}",
		zconst.ErrCodeContainsDigit:                         "string must contain at least one digit",
		internals.NotErrCode(zconst.ErrCodeContainsDigit):   "string must not contain any digits",
		zconst.ErrCodeContainsUpper:                         "string must contain at least one uppercase letter",
		internals.NotErrCode(zconst.ErrCodeContainsUpper):   "string must contain any uppercase letters",
		zconst.ErrCodeContainsLower:                         "string must contain at least one lowercase letter",
		internals.NotErrCode(zconst.ErrCodeContainsLower):   "string must contain any lowercase letters",
		zconst.ErrCodeContainsSpecial:                       "string must contain at least one special character",
		internals.NotErrCode(zconst.ErrCodeContainsSpecial): "string must contain any special character",
		zconst.ErrCodeOneOf:                                 "string must be one of {{one_of_options}}",
		internals.NotErrCode(zconst.ErrCodeOneOf):           "string must not be one of {{one_of_options}}",
		zconst.ErrCodeFallback:                              "string is invalid",
	},
	zconst.TypeBool: {
		zconst.ErrCodeRequired: "is required",
		zconst.ErrCodeNotNil:   "must not be empty",
		zconst.ErrCodeTrue:     "must be true",
		zconst.ErrCodeFalse:    "must be false",
		zconst.ErrCodeFallback: "value is invalid",
	},
	zconst.TypeNumber: {
		zconst.ErrCodeRequired: "is required",
		zconst.ErrCodeNotNil:   "must not be empty",
		zconst.ErrCodeLTE:      "number must be less than or equal to {{lte}}",
		zconst.ErrCodeLT:       "number must be less than {{lt}}",
		zconst.ErrCodeGTE:      "number must be greater than or equal to {{gte}}",
		zconst.ErrCodeGT:       "number must be greater than {{gt}}",
		zconst.ErrCodeEQ:       "number must be equal to {{eq}}",
		zconst.ErrCodeOneOf:    "number must be one of {{options}}",
		zconst.ErrCodeFallback: "number is invalid",
	},
	zconst.TypeTime: {
		zconst.ErrCodeRequired: "is required",
		zconst.ErrCodeNotNil:   "must not be empty",
		zconst.ErrCodeAfter:    "time must be after {{after}}",
		zconst.ErrCodeBefore:   "time must be before {{before}}",
		zconst.ErrCodeEQ:       "time must be equal to {{eq}}",
		zconst.ErrCodeFallback: "time is invalid",
	},
	zconst.TypeSlice: {
		zconst.ErrCodeRequired: "is required",
		zconst.ErrCodeNotNil:   "must not be empty",
		zconst.ErrCodeMin:      "slice must contain at least {{min}} items",
		zconst.ErrCodeMax:      "slice must contain at most {{max}} items",
		zconst.ErrCodeLen:      "slice must contain exactly {{len}} items",
		zconst.ErrCodeContains: "slice must contain {{contained}}",
		zconst.ErrCodeFallback: "slice is invalid",
	},
	zconst.TypeStruct: {
		zconst.ErrCodeRequired: "is required",
		zconst.ErrCodeNotNil:   "must not be empty",
		zconst.ErrCodeFallback: "struct is invalid",
		// JSON
		zconst.ErrCodeInvalidJSON: "invalid json body",
		// ZHTTP ERRORS
		zconst.ErrCodeZHTTPInvalidForm:  "invalid form data",
		zconst.ErrCodeZHTTPInvalidQuery: "invalid query params",
	},
}
